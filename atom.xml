<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一口田的独立博客</title>
  
  <subtitle>爱生活，爱编码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tsxf.github.io/"/>
  <updated>2017-10-13T12:26:39.992Z</updated>
  <id>https://tsxf.github.io/</id>
  
  <author>
    <name>tsxf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java中的代理模式</title>
    <link href="https://tsxf.github.io/2017/10/13/proxy/"/>
    <id>https://tsxf.github.io/2017/10/13/proxy/</id>
    <published>2017-10-13T09:05:10.000Z</published>
    <updated>2017-10-13T12:26:39.992Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>  <h2 id="代理的分类"><a href="#代理的分类" class="headerlink" title="代理的分类"></a>代理的分类</h2><ol><li>静态代理</li><li>动态代理</li></ol><p>&emsp;静态代理代码在编译期间就有了，也就是事先写好了代理代码。动态代理，在编译期间没有生成，在程序运行中生成的代理类。JDK的动态代理要求必须是接口。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>&emsp;静态代理模式其实很常见，比如买火车票这件小事：黄牛相当于是火车站的代理，我们可以通过黄牛买票，但只能去火车站进行改签和退票。在代码实现中相当于为一个委托对象realSubject提供一个代理对象proxy，通过proxy可以调用realSubject的部分功能，并添加一些额外的业务处理，同时可以屏蔽realSubject中未开放的接口。</p><p><img src="https://i.imgur.com/rbQuu8N.png" alt=""></p><p>1、RealSubject是委托类，Proxy是代理类</p><p>2、Subject是委托类和代理类的接口</p><p>3、request()是委托类和代理类中的共同方法</p><p>代码实现如下：</p><pre><code>interface Subject { void request();}class RealSubject implements Subject {    public void request(){    System.out.println(&quot;RealSubject&quot;);  }}class Proxy implements Subject {    private Subject subject;public Proxy(Subject subject){        this.subject = subject;  }public void request(){        System.out.println(&quot;begin&quot;);     subject.request();        System.out.println(&quot;end&quot;);  }}public class ProxyTest {    public static void main(String args[]) {            RealSubject subject = new RealSubject();            Proxy p = new Proxy(subject);            p.request();  }}</code></pre><p>&emsp;静态代理实现中，一个委托类对应一个代理类，代理类在编译期间就已经确定了。</p><p>&emsp;可以看到在代理类Proxy中持有一个委托类RealSubject的引用，并且代理类和委托类都实现了相同的Subject接口，在调用委托类RealSubject的request()方法时，实际上是调用代理类的request()方法，我们可以在代理类相同的方法中做一些处理，比如：访问控制，日志输出等。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>&emsp;动态代理中，代理类并不是在Java代码中实现，而是在运行时期生成，相比静态代理，动态代理可以很方便的对委托类的方法进行统一处理，如添加方法调用次数、添加日志功能等等，动态代理分为jdk动态代理和cglib动态代理，下面通过一个例子看看如何实现jdk动态代理</p><p>&emsp; 定义Helloworld接口（Suubject）</p><pre><code>package proxy;public interface Helloworld {    void sayHello();    void sayHi();}</code></pre><p>&emsp; 定义HelloworldImpl实现Helloworld接口（RealSubject）</p><pre><code> package proxy;public class HelloworldImpl implements Helloworld {    @Override    public void sayHello() {        System.out.println(&quot;hello world&quot;);    }    @Override    public void sayHi() {        System.out.println(&quot;say hi&quot;);    }}</code></pre><p>  &emsp; 定义MyInvocationHandler实现InvocationHandler接口（Proxy）  </p><pre><code>package proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class MyInvocationHandler implements InvocationHandler {    private Object target;    public MyInvocationHandler(Object target) {        this.target = target;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(&quot;method :&quot; + method.getName() + &quot; is invoked!&quot;);        return method.invoke(target, args);    }}</code></pre><p>  &emsp; 定义测试类JDKProxyTest</p><pre><code> package proxy;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationHandler;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Proxy;/** * JDKProxy 代理demo程序 * 必须实现InvocationHandler接口，作为调用处理器”拦截“对代理类方法的调用。 * @author Soul * */public class JDKProxyTest {    public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException,            IllegalAccessException, IllegalArgumentException, InvocationTargetException {        // 这里有两种写法        // 第一种        // 拿到要代理对象的字节码Class        Class&lt;?&gt; proxyClass = Proxy.getProxyClass(Helloworld.class.getClassLoader(), Helloworld.class);//JDKProxyTest        // 通过给字节码的构造器Constructor指定参数传值，构造出构造器对象        final Constructor&lt;?&gt; cons = proxyClass.getConstructor(InvocationHandler.class);        // 需要增强的功能，入参为原来的接口功能        final InvocationHandler ih = new MyInvocationHandler(new HelloworldImpl());        // 通过newInstance生成代理对象,加载到内存中        Helloworld helloWorld = (Helloworld) cons.newInstance(ih);        // 调用代理对象的sayHello()方法        //通过代理类对象调用代理类方法，实际上会转到invoke方法调用        helloWorld.sayHello();        helloWorld.sayHi();        // 下面是更简单的一种写法，本质上和上面是一样的        /*HelloWorld helloWorld = (HelloWorld) Proxy.newProxyInstance(JDKProxyTest.class.getClassLoader(),                new Class&lt;?&gt;[] { HelloWorld.class }, new MyInvocationHandler(new HelloworldImpl()));        helloWorld.sayHello();*/    }}</code></pre><p>&emsp;可以在Eclipse中JRE中缺省参数加入-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true 这个参数加入到JVM 启动参数中，它的作用是帮我们把JDK动态生成的proxy class 的字节码保存到硬盘中，帮助我们查看具体生成proxy的内容。</p><p>&emsp;程序运行结果:</p><pre><code>method :sayHello is invoked!hello worldmethod :sayHi is invoked!say hi</code></pre><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>代理类生成的过程主要包括两部分：</p><p><code>*</code>代理类字节码生成</p><p><code>*</code>把字节码通过传入的类加载器加载到虚拟机中</p><p>Proxy类的getProxyClass方法入口：需要传入类加载器和interface</p><p><img src="https://i.imgur.com/CRRGaNi.png" alt=""><br>然后调用getProxyClass0方法，里面的注解解释很清楚，如果实现当前接口的代理类存在，直接从缓存中返回，如果不存在，则通过ProxyClassFactory来创建。这里可以明显看到有对interface接口数量的限制，不能超过65535。其中proxyClassCache具体初始化信息如下：</p><p>proxyClassCache = new WeakCache&lt;&gt;(new KeyFactory(), new ProxyClassFactory());<br>其中创建代理类的具体逻辑是通过ProxyClassFactory的apply方法来创建的。<br><img src="https://i.imgur.com/p1L8OJ5.png" alt=""></p><p>proxyClassCache内容信息<br><img src="https://i.imgur.com/LxenOyo.png" alt=""></p><p>ProxyClassFactory里的逻辑包括了包名的创建逻辑，调用ProxyGenerator. generateProxyClass生成代理类，把代理类字节码加载到JVM。</p><ol><li><p>包名生成逻辑默认是com.sun.proxy，如果被代理类是 non-public proxy interface ，则用和被代理类接口一样的包名，类名默认是$Proxy 加上一个自增的整数值。</p></li><li><p>包名类名准备好后，就是通过ProxyGenerator. generateProxyClass根据具体传入的接口创建代理字节码，-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true 这个参数就是在该方法起到作用，如果为true则保存字节码到磁盘。代理类中，所有的代理方法逻辑都一样都是调用invocationHander的invoke方法，这个我们可以看后面具体代理反编译结果。</p></li><li>把字节码通过传入的类加载器加载到JVM中: defineClass0(loader, proxyName,proxyClassFile, 0, proxyClassFile.length);。</li></ol><p>ProxyClassFactory代码如下：</p><pre><code> /** * A factory function that generates, defines and returns the proxy class given * the ClassLoader and array of interfaces. */private static final class ProxyClassFactory    implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;{    // prefix for all proxy class names    private static final String proxyClassNamePrefix = &quot;$Proxy&quot;;    // next number to use for generation of unique proxy class names    private static final AtomicLong nextUniqueNumber = new AtomicLong();    @Override    public Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) {        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = new IdentityHashMap&lt;&gt;(interfaces.length);        for (Class&lt;?&gt; intf : interfaces) {            /*             * Verify that the class loader resolves the name of this             * interface to the same Class object.             * 入参 interfaces 检验，包含三部分             * （1）是否在入参指定的 ClassLoader 内             * （2）是否是 Interface             * （3）interfaces 中是否有重复             */            Class&lt;?&gt; interfaceClass = null;            try {                interfaceClass = Class.forName(intf.getName(), false, loader);            } catch (ClassNotFoundException e) {            }            if (interfaceClass != intf) {                throw new IllegalArgumentException(                    intf + &quot; is not visible from class loader&quot;);            }            /*             * Verify that the Class object actually represents an             * interface.             *              */            if (!interfaceClass.isInterface()) {                throw new IllegalArgumentException(                    interfaceClass.getName() + &quot; is not an interface&quot;);            }            /*             * Verify that this interface is not a duplicate.             */            if (interfaceSet.put(interfaceClass, Boolean.TRUE) != null) {                throw new IllegalArgumentException(                    &quot;repeated interface: &quot; + interfaceClass.getName());            }        }        String proxyPkg = null;     // package to define proxy class in        int accessFlags = Modifier.PUBLIC | Modifier.FINAL;        /*         * Record the package of a non-public proxy interface so that the         * proxy class will be defined in the same package.  Verify that         * all non-public proxy interfaces are in the same package.         * 如果 interfaces 中存在非 public 的接口，则所有非 public 接口必须在同一包下面，后续生成的代理类也会在该包下面         */        //生成包名和类名逻辑        for (Class&lt;?&gt; intf : interfaces) {            int flags = intf.getModifiers();            if (!Modifier.isPublic(flags)) {                accessFlags = Modifier.FINAL;                String name = intf.getName();                int n = name.lastIndexOf(&apos;.&apos;);                String pkg = ((n == -1) ? &quot;&quot; : name.substring(0, n + 1));                if (proxyPkg == null) {                    proxyPkg = pkg;                } else if (!pkg.equals(proxyPkg)) {                    throw new IllegalArgumentException(                        &quot;non-public interfaces from different packages&quot;);                }            }        }        if (proxyPkg == null) {            // if no non-public proxy interfaces, use com.sun.proxy package            proxyPkg = ReflectUtil.PROXY_PACKAGE + &quot;.&quot;;        }        /*         * Choose a name for the proxy class to generate.         * 得到代理类的类名         */        long num = nextUniqueNumber.getAndIncrement();        String proxyName = proxyPkg + proxyClassNamePrefix + num;        /*         * Generate the specified proxy class.         * 动态生成代理类的字节码          * -Dsun.misc.ProxyGenerator.saveGeneratedFiles=true 在该部起作用         */        byte[] proxyClassFile = ProxyGenerator.generateProxyClass(            proxyName, interfaces, accessFlags);        try {            //加载到JVM中  native 层实现，虚拟机加载代理类并返回其类对象            return defineClass0(loader, proxyName,                                proxyClassFile, 0, proxyClassFile.length);        } catch (ClassFormatError e) {            /*             * A ClassFormatError here means that (barring bugs in the             * proxy class generation code) there was some other             * invalid aspect of the arguments supplied to the proxy             * class creation (such as virtual machine limitations             * exceeded).             */            throw new IllegalArgumentException(e.toString());        }    }} </code></pre><hr><p>&emsp;我们可以根据代理类的字节码进行反编译，可以得到如下结果，其中HelloWorld有sayHello(),sayHi()方法，但是代理类中有五个方法 包括了Object上的三个方法：equals,toString,hashCode。</p><p>&emsp;代理类是以$Proxy为类名前缀，继承自Proxy，并且实现了Proxy.newProxyInstance(…)第二个参数传入的所有接口的类。<br>如果代理类实现的接口中存在非 public 接口，则其包名为该接口的包名，否则为com.sun.proxy。<br>其中的sayHello()、sayHi()函数都是直接交给h去处理，h在父类Proxy中定义为<br>protected InvocationHandler h;<br>即为Proxy.newProxyInstance(…)第三个参数。<br>所以InvocationHandler的子类 C 连接代理类 A 和委托类 B，它是代理类 A 的委托类，委托类 B 的代理类。</p><p>&emsp;代理的大概结构包括4部分：</p><p><code>*</code>静态字段：被代理的接口所有方法都有一个对应的静态方法变量；</p><p><code>*</code>静态块：主要是通过反射初始化静态方法变量；</p><p><code>*</code> 具体每个代理方法：逻辑都差不多就是 h.invoke，主要是调用我们定义好的invocatinoHandler逻辑,触发目标对象target上对应的方法;</p><p><code>*</code>构造函数：从这里传入我们InvocationHandler逻辑；</p><p>用jade查看生成的字节码文件</p><pre><code>package com.sun.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.lang.reflect.UndeclaredThrowableException;import proxy.Helloworld;public final class $Proxy0  extends Proxy  implements Helloworld{  private static Method m1;  private static Method m3;  private static Method m4;  private static Method m2;  private static Method m0;  public $Proxy0(InvocationHandler paramInvocationHandler)  {super(paramInvocationHandler);  }  public final boolean equals(Object paramObject)  {try{  return ((Boolean)this.h.invoke(this, m1, new Object[] { paramObject })).booleanValue();}catch (Error|RuntimeException localError){  throw localError;}catch (Throwable localThrowable){  throw new UndeclaredThrowableException(localThrowable);}  }  public final void sayHello()  {try{  this.h.invoke(this, m3, null);  return;}catch (Error|RuntimeException localError){  throw localError;}catch (Throwable localThrowable){  throw new UndeclaredThrowableException(localThrowable);}  }  public final void sayHi()  {try{  this.h.invoke(this, m4, null);  return;}catch (Error|RuntimeException localError){  throw localError;}catch (Throwable localThrowable){  throw new UndeclaredThrowableException(localThrowable);}  }  public final String toString()  {try{  return (String)this.h.invoke(this, m2, null);}catch (Error|RuntimeException localError){  throw localError;}catch (Throwable localThrowable){  throw new UndeclaredThrowableException(localThrowable);}  }  public final int hashCode()  {try{  return ((Integer)this.h.invoke(this, m0, null)).intValue();}catch (Error|RuntimeException localError){  throw localError;}catch (Throwable localThrowable){  throw new UndeclaredThrowableException(localThrowable);}  }  static  {try{  m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, new Class[] { Class.forName(&quot;java.lang.Object&quot;) });  m3 = Class.forName(&quot;proxy.Helloworld&quot;).getMethod(&quot;sayHello&quot;, new Class[0]);  m4 = Class.forName(&quot;proxy.Helloworld&quot;).getMethod(&quot;sayHi&quot;, new Class[0]);  m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;, new Class[0]);  m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;, new Class[0]);  return;}catch (NoSuchMethodException localNoSuchMethodException){  throw new NoSuchMethodError(localNoSuchMethodException.getMessage());}catch (ClassNotFoundException localClassNotFoundException){  throw new NoClassDefFoundError(localClassNotFoundException.getMessage());}  }}</code></pre><p>&emsp; 我们从上面的字节码可以得出如下结论：   </p><p><strong>1. toString() hashCode() equal()方法 调用逻辑：这个三个Object上的方法，如果被调用将和其他接口方法方法处理逻辑一样，都会经过invocationHandler逻辑，从上面的字节码结果就可以明显看出。其他Object上的方法将不会走代理处理逻辑，直接走Proxy继承的Object上方法逻辑。</strong></p><p><strong>2. interface 含有equals,toString hashCode方法时，和处理普通接口方法一样，都会走invocation handler逻辑，以目标对象重写的逻辑为准去触发方法逻辑；</strong></p><p><strong>3. interface含有重复的方法签名,以接口传入顺序为准，谁在前面就用谁的方法，代理类中只会保留一个，不会有重复的方法签名；</strong></p><p>参考文章：</p><p>  <a href="https://mp.weixin.qq.com/s/cTJ_IankiFOdwZZLq3mHQA" target="_blank" rel="external">Java帝国之动态代理</a></p><p>  <a href="http://www.importnew.com/23168.html" target="_blank" rel="external">JDK动态代理详解 </a></p><p> <a href="http://www.codekk.com/blogs/detail/54cfab086c4761e5001b253d" target="_blank" rel="external">公共技术点之 Java 动态代理 </a></p><p><a href="http://www.importnew.com/23972.html" target="_blank" rel="external">Java核心技术点之动态代理 </a></p><p><a href="http://www.importnew.com/26116.html" target="_blank" rel="external">说说 JAVA 代理模式 </a></p><p><a href="http://www.jianshu.com/p/a1d094fc6c00" target="_blank" rel="external">说说 JAVA 代理模式 </a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  
&lt;h2 id=&quot;代理的分类&quot;&gt;&lt;a href=&quot;#代理的分类&quot; class=&quot;headerlink&quot; title=&quot;代理的分类&quot;&gt;&lt;/a&gt;代理的分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;静态代理&lt;/li&gt;
&lt;li&gt;动态代理&lt;/li&gt;
&lt;/ol&gt;
&lt;p
      
    
    </summary>
    
      <category term="blog" scheme="https://tsxf.github.io/categories/blog/"/>
    
    
      <category term="文章" scheme="https://tsxf.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>IO流需要掌握的技能栈</title>
    <link href="https://tsxf.github.io/2017/09/22/my-new-post/"/>
    <id>https://tsxf.github.io/2017/09/22/my-new-post/</id>
    <published>2017-09-22T06:13:42.000Z</published>
    <updated>2017-10-13T13:42:15.622Z</updated>
    
    <content type="html"><![CDATA[<ol><li>IO NIO</li><li>网络编程基本概念：TCP/IP协议，IP地址，网关</li><li>TCP编程：Socket概念，TCP连接，UDP编程，TCP服务器多线程模型</li><li>Email编程：SMTP协议，发送邮件，发送附件，嵌入附件，POP3协议，接收邮件</li><li>Http客户端编程：HTTP协议，URLConnection</li><li>RMI远程调用：Java RMI原理＋示例</li><li>WebService  </li></ol><a id="more"></a>  <p>&ensp;&ensp; 默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：<a href="http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。" target="_blank" rel="external">http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</a></p><p>&emsp;如果您的网站存放在子目录中，例如 <a href="http://yoursite.com/blog，则请将您的" target="_blank" rel="external">http://yoursite.com/blog，则请将您的</a> url 设为 <a href="http://yoursite.comblog" target="_blank" rel="external">http://yoursite.comblog</a> 并把 root 设为 /blog/。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;IO NIO&lt;/li&gt;
&lt;li&gt;网络编程基本概念：TCP/IP协议，IP地址，网关&lt;/li&gt;
&lt;li&gt;TCP编程：Socket概念，TCP连接，UDP编程，TCP服务器多线程模型&lt;/li&gt;
&lt;li&gt;Email编程：SMTP协议，发送邮件，发送附件，嵌入附件，POP3协议，接收邮件&lt;/li&gt;
&lt;li&gt;Http客户端编程：HTTP协议，URLConnection&lt;/li&gt;
&lt;li&gt;RMI远程调用：Java RMI原理＋示例&lt;/li&gt;
&lt;li&gt;WebService  &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="blog" scheme="https://tsxf.github.io/categories/blog/"/>
    
    
      <category term="文章" scheme="https://tsxf.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
